2)HEURISTIC

CODE:

import random

def print_board(board):
    for row in board:
        print(" ".join(['X' if cell == 1 else 'O' if cell == 2 else '-' for cell in row]))

def is_winner(board, player):
    # Check rows, columns, and diagonals for a win
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(all(cell != 0 for cell in row) for row in board)

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == 0]

def evaluate_board(board):
    # Heuristic evaluation function
    # Prioritize the computer's winning moves
    score = 0
    for i in range(3):
        row_count = board[i].count(2)  # Count computer's 'O' in rows
        col_count = [board[j][i] for j in range(3)].count(2)  # Count computer's 'O' in columns
        score += row_count + col_count

    diag1_count = [board[i][i] for i in range(3)].count(2)  # Count computer's 'O' in the main diagonal
    diag2_count = [board[i][2 - i] for i in range(3)].count(2)  # Count computer's 'O' in the other diagonal
    score += diag1_count + diag2_count

    return score

def get_best_move(board):
    best_val = float('-inf')
    best_move = None
    for move in get_available_moves(board):
        board[move[0]][move[1]] = 2
        move_val = evaluate_board(board)
        board[move[0]][move[1]] = 0
        if move_val > best_val:
            best_val = move_val
            best_move = move
    return best_move

def play_tic_tac_toe():
    board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

    while True:
        print_board(board)
        player_row = int(input("Enter the row (0, 1, or 2): "))
        player_col = int(input("Enter the column (0, 1, or 2): "))
        if board[player_row][player_col] != 0:
            print("Invalid move. Try again.")
            continue

        board[player_row][player_col] = 1  # Player 1 is 'X'

        if is_winner(board, 1):
            print("Player 1 (X) wins!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

        computer_move = get_best_move(board)
        board[computer_move[0]][computer_move[1]] = 2  # Player 2 is 'O'

        if is_winner(board, 2):
            print("Player 2 (O) wins!")
            break
        elif is_board_full(board):
            print("It's a tie!")
            break

if __name__ == "__main__":
    play_tic_tac_toe()


OUTPUT:


- - -
- - -
- - -
Enter the row (0, 1, or 2): 0
Enter the column (0, 1, or 2): 1
- X -
- O -
- - -
Enter the row (0, 1, or 2): 0
Enter the column (0, 1, or 2): 2
O X X
- O -
- - -
Enter the row (0, 1, or 2): 1
Enter the column (0, 1, or 2): 2
O X X
- O X
O - -
Enter the row (0, 1, or 2): 2
Enter the column (0, 1, or 2): 1
Player 2 (O) wins!
